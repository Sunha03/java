JDBC
 > java로 DBMS를 연동하는 기술
   (SQL문을 자바로 만든 시스템을 통해 실행할 수 있도록 만들어진 자바의 기술)

 [JDBC 처리 순서(API 사용 전)]
 1. jdbc 드라이버를 제조사 홈페이지에서 다운
 	> C:\oraclexe\app\oracle\product\11.2.0\server\jdbc 폴더에 있는 ojdbc.jar 파일
 2. JVM이 인식할 수 있는 위치에 연결
 	1) 이클립스 사용하는 경우(Application)
 		(1) 작업중인 프로젝트 선택
 		(2) 프로젝트에서 단축메뉴(마우스 오른쪽) > Build Path > Config Build Path > 
 		(3) Library 탭 > Add External JARs... > 해당 JAR 파일 선택

 [JDBC 처리 순서(API 사용 후)]
 1. 오라클 드라이버 로딩
 	> JVM에서 드라이버 내의 API를 접근해서 사용할 수 있도록 Class 클래스의 forName 메소드를 이용해 핵심클래스를 로딩하는 작업
 	[문법]
 	Class.forName("DBMS 드라이버의 핵심 클래스명");
 				   > 패키지명까지 명시		
 				     ex)(오라클) oracle.jdbc.driver.OracleDriver, (MySQL) com.mysql.jdbc.Driver
 				     
 2. DBMS에 연결
 	> DriverManager 클래스의 getConnection 메소르들 사용
 	1) static 메소드이므로 클래스 이름으로 액세스
 	2) throw SQLException하고 있고, SQLException은 RuntimeException의 하위가 아니므로
 	   try/catch를 이용하여 exception에 대한 처리 필요
    3) 매개 변수
 	   url : DBMS 내부에서 인식할 연결 문자열(DBMS 종류에 따라 다름)
 			 [Oracle] jdbc:oracle:this:@70.12.115.50:1521:xe
 			 		  > 오라클에서 사용하는 프로토콜                  > port 번호
 			 		  				   > DBMS가 설치되어 있는 pc의 ip
 			 		  				   					  > 서비스명
 			 ex) jdbc:oracle:thin@127.0.0.1:1521:xe
 			 					  > localhost와 동일 - 로컬에 연결
 	   user : 접속 계정, password : 접속 계정의 비밀번호
 	4) 연결 타입
 	      연결 정보를 java.sql.Connection 타입으로 리턴
 	   DriverManager의 getConnection 메소드를 이용하면 DBMS에 연결 후 연결 정보를 객체로 만들어서 리턴
 	      연결 객체의 타입은 java.sql.Connection이지만 DBMS의 종류에 따라 Connection의 하위 객체가 리턴됨   
 	      내부에서는 접속된 DBMS 회사에서 제공하는 라이브러리 속 Connection이 리턴되도록 다형성이 적용되어 있음
	5) 사용 방법
	   Connection con = DriverManager.getConnection(url, user, password)
	   > DBMS 종류에 따라 다르게 리턴되는 Connection객체를 con 변수를 통해 접근 가능
	   
 3. SQL을 실행하는 역할을 담당하는 Statement 객체 생성
 	Statement >(상속)> PreparedStatement >(상속)> CallableStatement
 	: 정적 SQL 실행 	  : 동적 SQL 실행				: 각 DBMS에 특화된 SQL을 실행
 	    보안에 취약	 		시큐어코딩에 적합  			  ex) (Oracle) PL-SQL을 사용할 목적
 	  (SQLInjection에 취약)
 	1) Statement 객체를 이용
 	   Connetion 객체에 있는 createStatement 메소드를 통해 생성
 	   Connection 정보를 유지해야 함
 	   Statement stmt = con.createStatement();
 	    java.sql.Statement 타입이지만 드라이버 파일에 포함된 Statement 객체가 리턴
 	2) PreparedStatement 객체를 이용
 	
  4. SQL 실행
  	1) executeUpdate : insert, update, delete문을 실행
  		int 결과값 = stmt.executrUpdate(SQL문)
  		> SQL문 실행 결과				  > insert, delete, update
  		  (몇 개의 row가 변경됐는지 리턴)
  		 executeQuery : select문을 실행
  		 				select문의 실행 결과로 리턴되는 2차원 표를 자바에서 사용할 수 있도록 모델링해 놓은 객체가 ResultSet이고,
  		 				executeQuery 메소드는 결과로 ResultSet 객체를 반환하므로 이 객체를 반환받을 수 있도록 
  		 				ResultSet rs = stmt.excuteQuery("SQL문");
  	2) PreparedStatement 이용
 	   > 동적 SQL문을 사용해야 하기 때문에
 	   SQL이 실행되는 과정 : 쿼리문 읽고 분석 > 컴파일 > 실행
 	   Statement는 위의 단계를 모두 반복해서 실행하고 작업하지만 PreparedStatement는 한 번 실행 + 캐시 메모리에 저장 + 그다음부터는 캐시 메모리에서 읽어서 작업
 	   PreparedStatement는 SQL문을 실행하는 방식이 SQL문을 미리 파싱 > 동적으로 바인딩해서 작업해야 하는 값들만 나중에 연결 + 인식시키고 실행함
 	   (1) SQL문을 작성할 때 외부에서 입력 받아서 전달할 부분을 '?'로 정의함
 	   (2) SQL문을 미리 파싱해야하므로 실행할 때 SQL을 전달하지 않고, PareparedStatement 객체를 생성할 때 SQL문을 전달함
 	       PreparedStatement ptmt = con.prepareStatement("SQL문");
 	   (3) '?'에 값을 셋팅
 	   	   > PreparedStatement 객체제 정의되어 있는 setXXX 메소드를 이용
 	   	   	 ResultSet과 동일한 방식으로 메소드를 구성
 	   	   	 setXXXXX(index, 값)
 	   	   	 >컬럼 타입   >?순서   >컬럼에 설정할 값
 	   	   	 		    (1부터 시작)
 	   	     오라클 타입과 매칭되는 setXXXX 메소드 : 
 	   	     - setString(1, "ZZZ") : char, carchar2 
 	   	     - setInt(1, 0000) : number, integer
 	   	     - setDouble(1, 0.999) : 소수점이 있는 number
 	   	     - setDate(1, java.sql.Date 객체) : 날짜(date)
 	   (4) 실행 메소드 호출
 	   		- insert, delete, update : 
 	   		   int res = ptmt.executeUpdate();
 	   		- select
 	   		   ResultSet rs = ptmt.executeQuery();
 	   
 5. 결과값 처리
 	1) insert, delete, update 모두 동일
 	   > int로 결과를 리턴하므로 결과값을 출력
 	2) select
 	   > select문의 실행결과로 반환되는 ResultSet을 참조할 수 있도록 정의
 	     ResultSet rs = stmt.excuteQuery("SQL문");
 	   (1) ResultSet 안에서 모든 레코드를 읽어서 처리할 수 있도록 반복문을 이용해서 처리
 	              처음 반환되는 REsultSet에서 Cursor가 레코드에 위치하지 않음
 	        > Cursor를 ResultSet 안의 레코드에 위치할 수 있도록 내부 메소드를 이용해 처리함
 	       while(rs.next()) {
 	     	     > 다음 레코드로 Cursor를 이동하고, 레코드가 존재하면 true, 존재하지 않으면 false 리턴
 	       }
 	   (2) 레코드의 값을 읽음
 	   	   > 1번에 1개의 컬럼민 읽음. ResultSet 내부에서 제공되는 getXXX 메소드를 이용
 	   	     rs.getXXXXXXXXXXXXX(1)
 	   	     	   > 데이터 타입        > 조회된 컬럼의 순서(테이블에 존재하는 컬럼의 원래 순서 X)    
 	   	          오라클(DBMS)의 타입과 매칭되는 자바의 타입으로 메소드명이 구성
 	   	     - getString(컬럼 순서 or 컬럼명) : varchar2 or char로 정의된 컬럼값
 	   	     - getInt(컬럼 순서 or 컬럼명) : 소수점 없는 number or integer
 	   	     - getDouble(컬럼 순서 or 컬럼명) : 소수점 있는 number or integer
 	   	     - getDate(컬럼 순서 or 컬럼명) : 날짜 데이터
				while(rs.next()) {
 					  > 조회된 테이블의 모든 레코드에 반복 작업 수행
 					System.out.println(rs.getString(1));			//조회된 레코드의 1번째 컬럼 값
									   > rs.getString("ename");		//조회된 레코드의 컬럼명이 ename인 컬럼의 값
				}
				
 6. 자원반납
 	> 자원을 반납하지 않으면 계속 메모리에 할당되어 있는 상태
 	ResultSet, Statement, Connection 모두 반납해야 함
 	close 메소드를 이용해 자원해제 > 가장 마지막에 만들어진 객체들부터 해제